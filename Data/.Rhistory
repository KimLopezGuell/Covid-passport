if(degree(graph) ==0) {
vertex.label.cex=0.0005 * pmax(0.0001, degree(graph))} else {vertex.label.cex=0.0005 * degree(graph)},
rescale=TRUE,
vertex.label.color=rgb(0,0.5,betweenness(graph)/max(betweenness (graph)) ))
# Pictures more informative
plot(graph, layout=layout_nicely,
vertex.label.dist=0,
vertex.size=degree(graph)/10,
vertex.label.font=1,
vertex.label=V(graph)$id,
vertex.label.cex=0.0005 * pmax(0.0001, degree(graph)),
rescale=TRUE,
vertex.label.color=rgb(0,0.5,betweenness(graph)/max(betweenness (graph)) ))
# Laplacian G(n,p) graphs
single_experiment = function(n,p){
G = sample_gnp(n, p);
A = get.adjacency(G, type = 'both', sparse = TRUE);
A = as.matrix(A);
degsG = rowSums( A);
# print(degsG);
D = diag(degsG);
L = D - A;
ansEigs = eigen(L);
eigVects = ansEigs[['vectors']];
eigVals = ansEigs[['values']];
eigVals_sorted = sort(eigVals, decreasing=FALSE);
return(eigVals_sorted);
}
single_experiment(10,0.1)
n = 200;
p = 10/100;
nr_repetitions = 300;
ALL_Spectra = NULL;
for(i in 1 : nr_repetitions){
x = single_experiment(n,p);
ALL_Spectra = rbind(ALL_Spectra, x);
}
par(mfrow = c(2,2));
Second_Eigenvalue = ALL_Spectra[ ,2];
hist(Second_Eigenvalue, 20);
Last_Eigenvalue = ALL_Spectra[ ,n];
hist(Last_Eigenvalue, 20);
AverageSpectrum = colMeans(ALL_Spectra);
barplot(AverageSpectrum, main = 'Average spectrum');
k = 5;
r = 10;
colors = rainbow(r);
TOP_K = ALL_Spectra[1:r ,1:k];
colnames(TOP_K) = paste('Eigenvalue_', 1:k, sep='');rownames(TOP_K) = paste('Experiment_', 1:r, sep='');
barplot(TOP_K, beside=TRUE, main='Barplot', col=colors);
legend("topleft", inset=0.01, title="", legend = rownames(TOP_K), fill= colors, horiz=FALSE, cex= 1, bty =
"n");
ALL_Spectra
# HOMEWORK (due in WS2)
probability_vary <- function(p) {
vt<-c(1:100)
ad<-c(1:100)
for ( i in 1:100)
{g<- sample_gnp(500, p)
vt[i]<-transitivity(g, type="global")
ad[i]<-mean(degree(g))
cc[i]<-no.clusters(g)
}
hist(vt)
hist(ad)
hist(cc)
plot("End.")
}
probability_vary(1/10)
# HOMEWORK (due in WS2)
probability_vary <- function(p) {
vt<-c(1:100)
ad<-c(1:100)
cc<-c(1:100)
for ( i in 1:100)
{g<- sample_gnp(500, p)
vt[i]<-transitivity(g, type="global")
ad[i]<-mean(degree(g))
cc[i]<-no.clusters(g)
}
hist(vt)
hist(ad)
hist(cc)
plot("End.")
}
probability_vary(1/10)
cc
vt<-c(1:100)
ad<-c(1:100)
cc<-c(1:100)
for ( i in 1:100)
{g<- sample_gnp(500, p)
vt[i]<-transitivity(g, type="global")
ad[i]<-mean(degree(g))
cc[i]<-no.clusters(g)
}
cc
hist(vt)
hist(ad)
hist(cc)
# HOMEWORK (due in WS2)
probability_vary <- function(p) {
vt<-c(1:100)
ad<-c(1:100)
cc<-c(1:100)
for ( i in 1:100)
{g<- sample_gnp(500, p)
vt[i]<-transitivity(g, type="global")
ad[i]<-mean(degree(g))
cc[i]<-no.clusters(g)
}
hist(vt)
barplot(ad)
barplot(cc)
}
probability_vary(1/10)
# HOMEWORK (due in WS2)
probability_vary <- function(p) {
vt<-c(1:100)
ad<-c(1:100)
cc<-c(1:100)
for ( i in 1:100)
{g<- sample_gnp(500, p)
vt[i]<-transitivity(g, type="global")
ad[i]<-mean(degree(g))
cc[i]<-no.clusters(g)
}
hist(vt)
hist(ad)
hist(cc)
plot(c(1,1,1),c(0,0,0))
}
probability_vary(1/10)
dev.off(9)
dev.off()
probability_vary(2/10)
probability_vary(1/10)
par(mfrow=c(2,2))
probability_vary(1/10)
# HOMEWORK (due in WS2)
probability_vary <- function(p) {
vt<-c(1:100)
ad<-c(1:100)
cc<-c(1:100)
for ( i in 1:100)
{g<- sample_gnp(500, p)
vt[i]<-transitivity(g, type="global")
ad[i]<-mean(degree(g))
cc[i]<-no.clusters(g)
}
hist(vt)
hist(ad)
hist(cc)
plot(c(1,1,1),c(0,0,0))
}
probability_vary(1/10)
dev.on()
probability_vary(1/10)
plot(1,1)
library(igraph)
# HOMEWORK (due in WS2)
par(mfrow=c(2,2))
probability_vary <- function(p) {
vt<-c(1:100)
ad<-c(1:100)
cc<-c(1:100)
for ( i in 1:100)
{g<- sample_gnp(500, p)
vt[i]<-transitivity(g, type="global")
ad[i]<-mean(degree(g))
cc[i]<-no.clusters(g)
}
hist(vt)
hist(ad)
hist(cc)
plot(c(1,1,1),c(0,0,0))
}
probability_vary(1/10)
probability_vary(2/10)
probability_vary(4/10)
probability_vary(7/10)
# Ego-networks
library(igraph)
yeast<-read.graph("http://www.stats.ox.ac.uk/~reinert/dtc/YeastL.net", format="pajek")
yeast<-simplify(yeast, remove.multiple=TRUE, remove.loops=TRUE)
nb1<-neighbors(yeast, V(yeast)[1])
nb1
nb<-c(nb1, V(yeast)[1])
nb
sub<-graph.neighborhood(yeast, 1, nodes=V(yeast)[1])
plot(sub[[1]])
degree(yeast, V(yeast)[1983])
degree(yeast, V(yeast)[1554])
Sub1983<-graph.neighborhood(yeast, 1, nodes=V(yeast)[1983])
Sub1554<-graph.neighborhood(yeast, 1, nodes=V(yeast)[1554])
par(mfrow=c(2,1))
plot(Sub1983[[1]], layout= layout_nicely, vertex.label.cex=0.05)
plot(Sub1554[[1]], layout= layout_nicely, vertex.label.cex=0.05)
Sub2<-graph.neighborhood(yeast, 2, nodes=V(yeast)[1])
plot(Sub2[[1]] , layout= layout_nicely, vertex.label.cex=0.05)
Sub21554<-graph.neighborhood(yeast, 2, nodes=V(yeast)[1554])
plot(Sub21554 [[1]], layout= layout_nicely, vertex.label.cex=0.05)
#Triangle counts
count_triangles(yeast)
sum(count_triangles(yeast))
count_triangles(Sub2[[1]]) / (degree(Sub2[[1]]) * (degree(Sub2[[1]])-1)/2)
transitivity(Sub2[[1]], type="local")
#Subsampling
V<- V(yeast)
Vs<- sample(V, 10, replace = FALSE, prob = NULL)
V
Vs
Vind<-induced.subgraph(yeast, Vs, impl=c("auto"))
plot(Vind, layout= layout_nicely, vertex.label.cex=0.05)
snow<-make_ego_graph(
yeast,
order = 1,
nodes = Vs
)
snow
snow_list_df <- lapply(snow, as_data_frame)
snow_df <- do.call(rbind, snow_list_df)
snow_list_df
snow_df
snowball <- graph_from_data_frame(snow_df , directed = FALSE)
snowball
snowball<-simplify(snowball)
help(igraph)
gsiez(Vind) #number of edges
gsize(Vind) #number of edges
gsize(snowball)
plot(snowball, layout= layout_nicely, vertex.label="", vertex.size=10)
#Monte Carlo test
p<-ecount(yeast)*2/(vcount(yeast)*(vcount(yeast) - 1))
p
w<-c(1:49)
for(i in (1:49)){
N<-sample_gnp(vcount(yeast), p)
w[i]<-transitivity(N)
}
w
v<-c(w,transitivity(yeast))
sort(v)
match(transitivity(yeast), sort(v))
v
match(transitivity(yeast), sort(v))
transitivity(yeast)
# Global clustering coefficient vary across models
# using Monte Carlo
w2<-c(1:49)
for(i in (1:49)){
N<-sample_smallworld(1,vcount(yeast),4, p)
w[i]<-transitivity(N)
}
w<-c(1:49)
for(i in (1:49)){
N<-sample_gnp(vcount(yeast), p)
w[i]<-transitivity(N)
}
v<-c(w,transitivity(yeast))
sort(v)
match(transitivity(yeast), sort(v))
# Global clustering coefficient vary across models
# using Monte Carlo
w2<-c(1:49)
for(i in (1:49)){
N<-sample_smallworld(1,vcount(yeast),4, p)
w2[i]<-transitivity(N)
}
w2
v2<-c(v,w2)
sort(v2)
match(transitivity(yeast), sort(v2))
# Ego-networks
library(igraph)
#Monte Carlo test
p<-ecount(yeast)*2/(vcount(yeast)*(vcount(yeast) - 1))
w<-c(1:49)
yeast<-read.graph("http://www.stats.ox.ac.uk/~reinert/dtc/YeastL.net", format="pajek")
yeast<-simplify(yeast, remove.multiple=TRUE, remove.loops=TRUE)
#Monte Carlo test
p<-ecount(yeast)*2/(vcount(yeast)*(vcount(yeast) - 1))
w<-c(1:49)
for(i in (1:49)){
N<-sample_gnp(vcount(yeast), p)
w[i]<-transitivity(N)
}
v<-c(w,transitivity(yeast))
sort(v)
match(transitivity(yeast), sort(v))
# Global clustering coefficient vary across models
# using Monte Carlo
w2<-c(1:49)
for(i in (1:49)){
N<-sample_smallworld(1,vcount(yeast),4, p)
w2[i]<-transitivity(N)
}
v2<-c(v,w2)
sort(v2)
match(transitivity(yeast), sort(v2))
w3<-c(1:49)
for(i in (1:49)){
N<-sample_pa(vcount(yeast), directed=FALSE)
w3[i]<-transitivity(N)
}
v3<-c(v,w3)
sort(v3)
match(transitivity(yeast), sort(v3))
v3<-c(v,w2,w3)
sort(v3)
match(transitivity(yeast), sort(v3))
N<-sample_pa(vcount(yeast), directed=FALSE)
N
w3[i]<-transitivity(N)
w3
library(tidyverse)
library(forecast)
# Read the dataset
Cases_EU <- read.csv("Cases_EU_dc16.csv")
Cases_EU <- as_tibble(Cases_EU)
Cases_EU <- Cases_EU[,c(1,5,7)]
Cases_EU <- Cases_EU[Cases_EU$countriesAndTerritories %in% c("Denmark", "France", "Germany"), ]
Cases_EU <- Cases_EU[!grepl("2020", Cases_EU$dateRep),]
Cases_EU <- Cases_EU[!grepl("01/03/2021", Cases_EU$dateRep),]
Cases_EU$dateRep <- as.Date(Cases_EU$dateRep,format="%d/%m/%y")
colnames(Cases_EU)[1] <- "date"
#Create the Germany smoothed data (using the smooth_7 function)
Cases_EU_region <- split(Cases_EU, Cases_EU$countriesAndTerritories)
De_cases <- Cases_EU_region[[3]]
# Read the dataset
setwd("/home/user/Escritorio/Kim/Oxford/Dissertation/Data")
Cases_EU <- read.csv("Cases_EU_dc16.csv")
Cases_EU <- as_tibble(Cases_EU)
Cases_EU <- Cases_EU[,c(1,5,7)]
Cases_EU <- Cases_EU[Cases_EU$countriesAndTerritories %in% c("Denmark", "France", "Germany"), ]
Cases_EU <- Cases_EU[!grepl("2020", Cases_EU$dateRep),]
Cases_EU <- Cases_EU[!grepl("01/03/2021", Cases_EU$dateRep),]
Cases_EU$dateRep <- as.Date(Cases_EU$dateRep,format="%d/%m/%y")
colnames(Cases_EU)[1] <- "date"
#Create the Germany smoothed data (using the smooth_7 function)
Cases_EU_region <- split(Cases_EU, Cases_EU$countriesAndTerritories)
De_cases <- Cases_EU_region[[3]]
De_cases
n <- nrow(De_cases)
De_cases$cases <- rev(De_cases$cases)
De_cases$date <- rev(De_cases$date)
De_cases
diff(De_cases$cases)
diff(De_cases$cases,lag=7)
ggplot(data = De_cases, aes(x = date, y = cases)) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
ggplot(data = De_cases, aes(x = date, y = diff(cases,lag=7))) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
ggplot(data = De_cases, aes(x = date[c(1:285)], y = diff(cases,lag=7))) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
4252-3247
4252-3947
ggplot(data = De_cases, aes(x = date, y = cases)) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
De_cases_dif <- cbind(diff(De_cases$cases,lag=7),De_cases$date[-c(1:7)])
De_cases_dif
De_cases_dif <- c(rep(NA,7),diff(De_cases$cases,lag=7))
ggplot(data = De_cases, aes(x = date, y = cases)) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
cases_dif <- c(rep(NA,7),diff(De_cases$cases,lag=7))
De_cases <- cbind(De_cases,cases_dif)
ggplot(data = De_cases, aes(x = date, y = cases_dif)) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
De_cases_NP1 <- De_cases[c(122:189),]
ggplot(data = De_cases_NP1, aes(x = date, y = cases_dif)) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
pacf(De_cases$cases_dif)
pacf(De_cases_NP1$cases_dif)
par(mfrow=c(1,2))
acf(De_cases_NP1$cases_dif)
pacf(De_cases_NP1$cases_dif)
De_cases_NP1 <- cbind(De_cases_NP1,c(NA,diff(De_cases_NP1$cases_dif)))
De_cases_NP1
colnames(De_cases_NP1)[5] <- cases_dif2
colnames(De_cases_NP1)[5] <- "cases_dif2"
ggplot(data = De_cases_NP1, aes(x = date, y = cases_dif2)) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
par(mfrow=c(1,2))
acf(De_cases_NP1$cases_dif2)
acf(De_cases_NP1$cases_dif2[-1])
pacf(De_cases_NP1$cases_dif2[-1])
Arima(y=De_cases_NP1[-1,],order=c(1,0,1),xreg=matriu[c(122:189),])
#Define the three vectors (NPI and two tendencies)
NPI1 <- c(rep(0,174),rep(NA,5),rep(1,(n-179)))
t1 <- c(c(0:173),rep(NA,5),c(174:(n-6)))
t2 <- c(rep(0,174),rep(NA,5),c(0:(n-180)))
matriu1 <- cbind(NPI1,t1,t2) # first NPI change alone
Arima(y=De_cases_NP1[-1,],order=c(1,0,1),xreg=matriu1[c(122:189),])
Arima(y=De_cases_NP1$cases_dif[-1,],order=c(1,0,1),xreg=matriu1[c(122:189),])
Arima(y=De_cases_NP1$cases_dif[-1],order=c(1,0,1),xreg=matriu1[c(122:189),])
Arima(y=De_cases_NP1$cases_dif[-1],order=c(1,0,1),xreg=matriu1[c(122:188),])
Arima(y=De_cases_NP1$cases_dif[-1],order=c(1,0,1),xreg=matriu1[c(123:189),])
Arima(y=De_cases_NP1$cases_dif[-1],order=c(1,1,1),xreg=matriu1[c(123:189),])
Arima(y=De_cases_NP1$cases_dif[-1],order=c(3,0,1),xreg=matriu1[c(123:189),])
View(De_cases_NP1)
auto.arima(y=De_cases_NP1$cases_dif[-1],xreg=matriu1[c(123:189),])
Arima(y=De_cases_NP1$cases_dif[-1],order=c(1,0,1),xreg=matriu1[c(123:189),])
Arima(y=De_cases_NP1$cases,order=c(1,0,1),seasonal=c(0,7,0),xreg=matriu1[c(122:189),])
auto.arima(y=De_cases_NP1$cases,seasonal=T,xreg=matriu1[c(122:189),])
acf(De_cases_NP1$cases)
pacf(De_cases_NP1$cases)
# Not clear if I should force 7-day seasonality or not. First I'll do without, then with
cases_dif <- c(NA,diff(De_cases$cases,lag=1))
De_cases <- cbind(De_cases;cases_dif)
#Create the Germany smoothed data (using the smooth_7 function)
Cases_EU_region <- split(Cases_EU, Cases_EU$countriesAndTerritories)
De_cases <- Cases_EU_region[[3]]
n <- nrow(De_cases)
De_cases$cases <- rev(De_cases$cases)
De_cases$date <- rev(De_cases$date)
acf(De_cases_NP1$cases)
pacf(De_cases_NP1$cases)
# Not clear if I should force 7-day seasonality or not. First I'll do without, then with
cases_dif <- c(NA,diff(De_cases$cases,lag=1))
De_cases <- cbind(De_cases,cases_dif)
acf(De_cases_NP1$cases_dif)
pacf(De_cases_NP1$cases_dif)
# Not clear if I should force 7-day seasonality or not. First I'll do without, then with
cases_dif <- c(NA,diff(De_cases$cases,lag=5))
De_cases <- cbind(De_cases,cases_dif)
acf(De_cases_NP1$cases_dif)
pacf(De_cases_NP1$cases_dif)
De_cases <- Cases_EU_region[[3]]
n <- nrow(De_cases)
De_cases$cases <- rev(De_cases$cases)
De_cases$date <- rev(De_cases$date)
acf(De_cases_NP1$cases)
pacf(De_cases_NP1$cases)
# Not clear if I should force 7-day seasonality or not. First I'll do without, then with
cases_dif <- c(NA,diff(De_cases$cases,lag=5))
De_cases <- cbind(De_cases,cases_dif)
acf(De_cases_NP1$cases_dif)
pacf(De_cases_NP1$cases_dif)
De_cases$cases <- rev(De_cases$cases)
De_cases$date <- rev(De_cases$date)
acf(De_cases_NP1$cases)
pacf(De_cases_NP1$cases)
# Not clear if I should force 7-day seasonality or not. First I'll do without, then with
cases_dif <- c(NA,diff(De_cases$cases,lag=6))
De_cases <- cbind(De_cases,cases_dif)
acf(De_cases_NP1$cases_dif)
pacf(De_cases_NP1$cases_dif)
De_cases <- Cases_EU_region[[3]]
n <- nrow(De_cases)
De_cases$cases <- rev(De_cases$cases)
De_cases$date <- rev(De_cases$date)
acf(De_cases_NP1$cases)
pacf(De_cases_NP1$cases)
# Not clear if I should force 7-day seasonality or not. First I'll do without, then with
cases_dif <- c(rep(NA,5),diff(De_cases$cases,lag=5))
De_cases <- cbind(De_cases,cases_dif)
acf(De_cases_NP1$cases_dif)
pacf(De_cases_NP1$cases_dif)
De_cases <- Cases_EU_region[[3]]
n <- nrow(De_cases)
De_cases$cases <- rev(De_cases$cases)
De_cases$date <- rev(De_cases$date)
acf(De_cases_NP1$cases)
pacf(De_cases_NP1$cases)
# Not clear if I should force 7-day seasonality or not. First I'll do without, then with
cases_dif <- c(rep(NA,7),diff(De_cases$cases,lag=7))
De_cases <- cbind(De_cases,cases_dif)
acf(De_cases_NP1$cases_dif)
pacf(De_cases_NP1$cases_dif)
# Look at first ACF/PACF plots
par(mfrow=c(2,1))
acf(De_cases_NP1$cases)
pacf(De_cases_NP1$cases)
# Not clear if I should force 7-day seasonality or not. First I'll do without it, then with it
cases_dif <- c(NA,diff(De_cases$cases,lag=1))
De_cases
# Read and polish the data
setwd("/home/user/Escritorio/Kim/Oxford/Dissertation/Data")
Cases_EU <- read.csv("Cases_EU_dc16.csv")
Cases_EU <- as_tibble(Cases_EU)
Cases_EU <- Cases_EU[,c(1,5,7)]
Cases_EU <- Cases_EU[Cases_EU$countriesAndTerritories %in% c("Denmark", "France", "Germany"), ]
Cases_EU <- Cases_EU[!grepl("2020", Cases_EU$dateRep),]
Cases_EU <- Cases_EU[!grepl("01/03/2021", Cases_EU$dateRep),]
Cases_EU$dateRep <- as.Date(Cases_EU$dateRep,format="%d/%m/%y")
colnames(Cases_EU)[1] <- "date"
Cases_EU_region <- split(Cases_EU, Cases_EU$countriesAndTerritories)
De_cases <- Cases_EU_region[[3]]
n <- nrow(De_cases)
De_cases$cases <- rev(De_cases$cases)
De_cases$date <- rev(De_cases$date)
# Select the first Covid Passport intervention time range (same as in SR)
De_cases_NP1 <- De_cases[c(122:189),]
De_cases_NP1
# Look at first ACF/PACF plots
par(mfrow=c(2,1))
acf(De_cases_NP1$cases)
pacf(De_cases_NP1$cases)
cases_dif
cases_dif <- diff(De_cases$cases,lag=1)
cases_dif <- diff(De_cases$cases,lag=1)
cases_dif
cases_dif <- cbind(cases_dif,De_cases_NP1$date[-1])
cases_dif <- diff(De_cases_NP1$cases,lag=1)
cases_dif
cases_dif <- cbind(cases_dif,De_cases_NP1$date[-1])
ggplot(data = cases_dif, aes(x = date, y = cases_dif)) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
cases_dif <- as.data.frame(cases_dif,De_cases_NP1$date[-1])
ggplot(data = cases_dif, aes(x = date, y = cases_dif)) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
cases_dif
cases_dif <- diff(De_cases_NP1$cases,lag=1)
cases_dif
cases_dif <- as.data.frame(cases_dif,De_cases_NP1$date[-1])
cases_dif
De_cases_NP1$date
De_cases_NP1$date[-1]
cases_dif <- cbind(cases_dif,De_cases_NP1$date[-1])
cases_dif
colnames(cases_dif)[2] <- "date"
ggplot(data = cases_dif, aes(x = date, y = cases_dif)) +  geom_line() +  labs(title = "Cases in Germany", x = "Date", y = "Cases")
